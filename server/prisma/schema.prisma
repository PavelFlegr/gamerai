generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model ContextEmbedding {
  id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String?                @db.Uuid
  embedding      Unsupported("vector")?
  chunk          String?
  conversation   Conversation?          @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversation")
}

model Conversation {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime           @default(now())
  title             String             @default("New conversation") @db.VarChar(255)
  systemMsg         String             @default("")
  context           String             @default("")
  userId            String             @db.VarChar(255)
  contextEmbeddings ContextEmbedding[]
  blockCount        Int                @default(10)
  blockSize         Int                @default(500)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, map: "conversation_user_id_foreign")
  messages          Message[]
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime     @default(now())
  role           String       @db.VarChar(255)
  content        String
  cost           Float
  conversationId String       @db.Uuid
  userId         String       @db.VarChar(255)
  conversations  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, map: "message_conversation_id_foreign")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, map: "message_user_id_foreign")
}

model User {
  id             String          @id @db.VarChar(255)
  createdAt      DateTime        @default(now())
  email          String          @unique(map: "user_email_unique") @db.VarChar(255)
  conversations  Conversation[]
  messages       Message[]
  collaborations Collaboration[]
}

model Collaboration {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  title     String   @default("New collaboration ") @db.VarChar(255)
  document  String   @default("")
  userId    String   @db.VarChar(255)
  cost      Float    @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
